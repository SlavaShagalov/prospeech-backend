version: "3.9"

services:
  # === Storages ===

  db:
    image: postgres
    container_name: ps_db
    restart: always
    environment:
      POSTGRES_DB: "ps_db"
      POSTGRES_USER: "moderator"
      POSTGRES_PASSWORD: "2222"
      PGDATA: "/var/lib/postgresql/data"
    volumes:
      - ./scripts/migrations/schema.sql:/docker-entrypoint-initdb.d/1.sql
      - ./scripts/migrations/fill_db.sql:/docker-entrypoint-initdb.d/2.sql
    ports:
      - "5432:5432"
    networks:
      - ps-network
    deploy:
      restart_policy:
        condition: on-failure

  redis:
    image: redis:alpine3.18
    container_name: ps_redis
    restart: always
    environment:
      REDIS_PASSWORD: "1234"
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6379:6379"
    networks:
      - ps-network
    deploy:
      restart_policy:
        condition: on-failure

  # === Services ===

  api:
    image: ps_api
    build:
      context: .
      dockerfile: ./cmd/api/Dockerfile
    container_name: ps_api
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    volumes:
      - ./cmd/api/logs:/logs
      - ./configs/api_main.yaml:/configs/api.yaml
      - ./.aws:/root/.aws
    networks:
      - ps-network
    deploy:
      restart_policy:
        condition: on-failure

  ml:
    image: vazhid/ml_serve:0.0.2
    container_name: ps_ml
    ports:
      - "8080:8080"
    networks:
      - ps-network
    deploy:
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx:1.22.1
    container_name: ps_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - ps-network
    deploy:
      restart_policy:
        condition: on-failure

networks:
  ps-network:
    name: ps_network
    driver: bridge
